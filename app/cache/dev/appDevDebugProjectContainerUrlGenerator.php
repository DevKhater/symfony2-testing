<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * appDevDebugProjectContainerUrlGenerator
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appDevDebugProjectContainerUrlGenerator extends Symfony\Component\Routing\Generator\UrlGenerator
{
    private static $declaredRoutes;

    /**
     * Constructor.
     */
    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
        if (null === self::$declaredRoutes) {
            self::$declaredRoutes = array(
        '_wdt' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:toolbarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_wdt',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_home' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:homeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_bar' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchBarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search_bar',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_purge' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:purgeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/purge',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_info' => array (  0 =>   array (    0 => 'about',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:infoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'about',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler/info',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_phpinfo' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:phpinfoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/phpinfo',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_results' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchResultsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/search/results',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_router' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.router:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/router',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception_css' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:cssAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception.css',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_twig_error_test' => array (  0 =>   array (    0 => 'code',    1 => '_format',  ),  1 =>   array (    '_controller' => 'twig.controller.preview_error:previewErrorPageAction',    '_format' => 'html',  ),  2 =>   array (    'code' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => '[^/]++',      3 => '_format',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'code',    ),    2 =>     array (      0 => 'text',      1 => '/_error',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ng_login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AngularBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ng/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ng_get_user' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AngularBundle\\Controller\\DefaultController::getUserAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ng/getUser',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_bands_list' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiBandController::getBandsAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/bands',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_band_show' => array (  0 =>   array (    0 => 'slug',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiBandController::showBandAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'slug',    ),    1 =>     array (      0 => 'text',      1 => '/api/bands',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_band_genres' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiBandController::getGenresAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/band/genres',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_band_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiBandController::postBandAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/band/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_band_update' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiBandController::putBandAction',  ),  2 =>   array (    '_method' => 'PUT',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/band/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_band_delete' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiBandController::deleteBandAction',  ),  2 =>   array (    '_method' => 'DELETE',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/api/band',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_band_add_image' => array (  0 =>   array (    0 => 'slug',    1 => 'image',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiBandController::addBandImageAction',  ),  2 =>   array (    '_method' => 'PATCH',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'image',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'slug',    ),    2 =>     array (      0 => 'text',      1 => '/api/band',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_concerts_list' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiConcertController::getConcertAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/concerts',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_concert_show' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiConcertController::showConcertAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/api/concerts',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_concert_get_band' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiConcertController::getConcertBandAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/band',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/api/concert',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_concert_patch_band' => array (  0 =>   array (    0 => 'id',    1 => 'name',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiConcertController::patchConcertBandAction',  ),  2 =>   array (    '_method' => 'PATCH',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'name',    ),    1 =>     array (      0 => 'text',      1 => '/band',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    3 =>     array (      0 => 'text',      1 => '/api/concert',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_concert_get_genre' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiConcertController::getConcertGenreAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/genre',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/api/concert',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_concert_get_location' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiConcertController::getConcertLocationAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/location',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/api/concert',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_concert_get_date' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiConcertController::getConcertDateAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/date',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/api/concert',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_concert_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiConcertController::postConcertAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/concert/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_concert_update' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiConcertController::putConcertAction',  ),  2 =>   array (    '_method' => 'PUT',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/concert/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_concert_delete' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiConcertController::deleteConcertAction',  ),  2 =>   array (    '_method' => 'DELETE',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/api/concert',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_gallery_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiGalleryController::postBandAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/gallery/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_gallery_add_image' => array (  0 =>   array (    0 => 'id',    1 => 'image',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiGalleryController::addGalleryImageAction',  ),  2 =>   array (    '_method' => 'PATCH',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'image',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/api/gallery',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_gallery_remove_image' => array (  0 =>   array (    0 => 'id',    1 => 'image',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiGalleryController::removeGalleryImageAction',  ),  2 =>   array (    '_method' => 'DELETE',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'image',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    2 =>     array (      0 => 'text',      1 => '/api/gallery',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_locations_list' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiLocationController::getLocationAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/locations',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_location_show' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiLocationController::showLocationAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/api/locations',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_location_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiLocationController::postLocationAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/location/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_location_update' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiLocationController::putLocationAction',  ),  2 =>   array (    '_method' => 'PUT',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/location/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_location_delete' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiLocationController::deleteLocationAction',  ),  2 =>   array (    '_method' => 'DELETE',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/api/location',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_media_list' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiMediaController::getMediaAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/media',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_media_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiMediaController::postMediaAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/media/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'api_media_delete' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\ApiMediaController::deleteImageAction',  ),  2 =>   array (    '_method' => 'DELETE',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/api/media',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_bandcrud_index' => array (  0 =>   array (    0 => 'offset',    1 => 'limit',  ),  1 =>   array (    'offset' => 1,    'limit' => 10,    '_controller' => 'DataBundle\\Controller\\CRUDBandController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'limit',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'offset',    ),    2 =>     array (      0 => 'text',      1 => '/bands/all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_bandcrud_show' => array (  0 =>   array (    0 => 'slug',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDBandController::showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'slug',    ),    1 =>     array (      0 => 'text',      1 => '/bands',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_bandcrud_new' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDBandController::newAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/band/new',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_bandcrud_edit' => array (  0 =>   array (    0 => 'slug',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDBandController::editAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'slug',    ),    1 =>     array (      0 => 'text',      1 => '/band/edit',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_bandcrud_delete' => array (  0 =>   array (    0 => 'slug',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDBandController::deleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'slug',    ),    1 =>     array (      0 => 'text',      1 => '/band/delete',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_concertcrud_index' => array (  0 =>   array (    0 => 'offset',    1 => 'limit',  ),  1 =>   array (    'offset' => 1,    'limit' => 10,    '_controller' => 'DataBundle\\Controller\\CRUDConcertController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'limit',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'offset',    ),    2 =>     array (      0 => 'text',      1 => '/concerts/all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_concertcrud_show' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDConcertController::showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/concerts',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_concertcrud_new' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDConcertController::newAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/concert/new',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_concertcrud_edit' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDConcertController::editAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/concert/edit',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_concertcrud_delete' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDConcertController::deleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/concert/delete',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_locationcrud_index' => array (  0 =>   array (    0 => 'offset',    1 => 'limit',  ),  1 =>   array (    'offset' => 1,    'limit' => 10,    '_controller' => 'DataBundle\\Controller\\CRUDLocationController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'limit',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'offset',    ),    2 =>     array (      0 => 'text',      1 => '/locations/all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_locationcrud_show' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDLocationController::showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/locations',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_locationcrud_new' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDLocationController::newAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/location/new',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_locationcrud_edit' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDLocationController::editAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/location/edit',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_locationcrud_delete' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDLocationController::deleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/location/delete',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_mediacrud_index' => array (  0 =>   array (    0 => 'offset',    1 => 'limit',  ),  1 =>   array (    'offset' => 1,    'limit' => 10,    '_controller' => 'DataBundle\\Controller\\CRUDMediaController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'limit',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'offset',    ),    2 =>     array (      0 => 'text',      1 => '/media/all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_mediacrud_show' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDMediaController::showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/media',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_mediacrud_new' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDMediaController::newAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/image/new',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_mediacrud_edit' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDMediaController::editAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/location/edit',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_mediacrud_delete' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\CRUDMediaController::deleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/location/delete',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'data_default_index' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'DataBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/test',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'mk_api_default_index' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'MK\\ApiBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'mk_api_default_testapipost' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'MK\\ApiBundle\\Controller\\DefaultController::testAPiPOSTAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/post',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'new_token' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'MK\\ApiBundle\\Controller\\TokenController::newTokenAction',  ),  2 =>   array (    '_method' => 'POST',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/token',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'check_token' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'MK\\ApiBundle\\Controller\\TokenController::checkTokenAction',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/token',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'mk_user_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'MK\\UserBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'mk_user_admin' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'MK\\UserBundle\\Controller\\DefaultController::adminAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/admin',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'user_registration' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'MK\\UserBundle\\Controller\\RegistrationController::registerAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/register',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'secure_login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'MK\\UserBundle\\Controller\\SecurityController::loginAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'login_check' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'MK\\UserBundle\\Controller\\SecurityController::loginCheckAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/login_check',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'logout' => array (  0 =>   array (  ),  1 =>   array (  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/logout',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'nelmio_api_doc_index' => array (  0 =>   array (    0 => 'view',  ),  1 =>   array (    '_controller' => 'Nelmio\\ApiDocBundle\\Controller\\ApiDocController::indexAction',    'view' => 'default',  ),  2 =>   array (    '_method' => 'GET',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'view',    ),    1 =>     array (      0 => 'text',      1 => '/doc',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_js_routing_js' => array (  0 =>   array (    0 => '_format',  ),  1 =>   array (    '_controller' => 'fos_js_routing.controller:indexAction',    '_format' => 'js',  ),  2 =>   array (    '_format' => 'js|json',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'js|json',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/js/routing',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
    );
        }
    }

    public function generate($name, $parameters = array(), $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens, $requiredSchemes) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens, $requiredSchemes);
    }
}
